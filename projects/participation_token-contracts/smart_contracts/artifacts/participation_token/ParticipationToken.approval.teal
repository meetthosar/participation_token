#pragma version 10

smart_contracts.participation_token.contract.ParticipationToken.approval_program:
    // smart_contracts/participation_token/contract.py:13
    // class ParticipationToken(ARC4Contract):
    method "create_application(uint64,uint64)void"
    method "opt_in_to_asset(pay)void"
    method "claim()void"
    method "delete_application()void"
    txna ApplicationArgs 0
    match main_create_application_route@1 main_opt_in_to_asset_route@2 main_claim_route@3 main_delete_application_route@4
    err // reject transaction

main_create_application_route@1:
    // smart_contracts/participation_token/contract.py:17
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/participation_token/contract.py:13
    // class ParticipationToken(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/participation_token/contract.py:17
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    callsub create_application
    int 1
    return

main_opt_in_to_asset_route@2:
    // smart_contracts/participation_token/contract.py:22
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/participation_token/contract.py:13
    // class ParticipationToken(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/participation_token/contract.py:22
    // @arc4.abimethod
    callsub opt_in_to_asset
    int 1
    return

main_claim_route@3:
    // smart_contracts/participation_token/contract.py:37
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub claim
    int 1
    return

main_delete_application_route@4:
    // smart_contracts/participation_token/contract.py:46
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    int DeleteApplication
    ==
    assert // OnCompletion is DeleteApplication
    txn ApplicationID
    assert // is not creating
    callsub delete_application
    int 1
    return


// smart_contracts.participation_token.contract.ParticipationToken.create_application(asset_id: uint64, quantity: uint64) -> void:
create_application:
    // smart_contracts/participation_token/contract.py:17-18
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    // def create_application(self, asset_id: UInt64, quantity: UInt64) -> None:
    proto 2 0
    // smart_contracts/participation_token/contract.py:19
    // self.asset_id = asset_id
    byte "asset_id"
    frame_dig -2
    app_global_put
    // smart_contracts/participation_token/contract.py:20
    // self.quantity = quantity
    byte "quantity"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.participation_token.contract.ParticipationToken.opt_in_to_asset(pay_txn: uint64) -> void:
opt_in_to_asset:
    // smart_contracts/participation_token/contract.py:22-23
    // @arc4.abimethod
    // def opt_in_to_asset(self, pay_txn: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/participation_token/contract.py:24
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/participation_token/contract.py:25
    // assert not Global.current_application_address.is_opted_in(Asset(self.asset_id))
    global CurrentApplicationAddress
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // smart_contracts/participation_token/contract.py:27
    // assert pay_txn.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/participation_token/contract.py:30-34
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_begin
    // smart_contracts/participation_token/contract.py:31
    // xfer_asset=self.asset_id,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/participation_token/contract.py:32
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/participation_token/contract.py:33
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/participation_token/contract.py:30
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/participation_token/contract.py:30-34
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.participation_token.contract.ParticipationToken.claim() -> void:
claim:
    // smart_contracts/participation_token/contract.py:37-38
    // @arc4.abimethod
    // def claim(self) -> None:
    proto 0 0
    // smart_contracts/participation_token/contract.py:40-44
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Txn.sender,
    //     asset_amount=1,
    // ).submit()
    itxn_begin
    // smart_contracts/participation_token/contract.py:41
    // xfer_asset=self.asset_id,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/participation_token/contract.py:42
    // asset_receiver=Txn.sender,
    txn Sender
    // smart_contracts/participation_token/contract.py:43
    // asset_amount=1,
    int 1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/participation_token/contract.py:40
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/participation_token/contract.py:40-44
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Txn.sender,
    //     asset_amount=1,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.participation_token.contract.ParticipationToken.delete_application() -> void:
delete_application:
    // smart_contracts/participation_token/contract.py:46-47
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    // def delete_application(self) -> None:
    proto 0 0
    // smart_contracts/participation_token/contract.py:48
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/participation_token/contract.py:50-55
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=Global.creator_address,
    // ).submit()
    itxn_begin
    // smart_contracts/participation_token/contract.py:51
    // xfer_asset=self.asset_id,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/participation_token/contract.py:52
    // asset_receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/participation_token/contract.py:54
    // asset_close_to=Global.creator_address,
    dup
    itxn_field AssetCloseTo
    // smart_contracts/participation_token/contract.py:53
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/participation_token/contract.py:50
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/participation_token/contract.py:50-55
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=Global.creator_address,
    // ).submit()
    itxn_submit
    // smart_contracts/participation_token/contract.py:57-61
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     close_remainder_to=Global.creator_address,
    // ).submit()
    itxn_begin
    // smart_contracts/participation_token/contract.py:58
    // receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/participation_token/contract.py:60
    // close_remainder_to=Global.creator_address,
    dup
    itxn_field CloseRemainderTo
    // smart_contracts/participation_token/contract.py:59
    // amount=0,
    int 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/participation_token/contract.py:57
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/participation_token/contract.py:57-61
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     close_remainder_to=Global.creator_address,
    // ).submit()
    itxn_submit
    retsub
